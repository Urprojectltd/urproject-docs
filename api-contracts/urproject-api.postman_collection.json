{
  "info": {
    "_postman_id": "urproject-api-collection-2025",
    "name": "UrProject API - Testing Collection",
    "description": "API testing collection for UrProject Construction Recruitment Platform with Laravel Breeze + Sanctum authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Health Checks",
      "item": [
        {
          "name": "Basic Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Status is healthy\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"healthy\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Detailed Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Health checks returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"checks\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/health/detailed",
              "host": ["{{base_url}}"],
              "path": ["health", "detailed"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Authentication - Registration",
      "item": [
        {
          "name": "Register Tradesperson (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user).to.have.property(\"uuid\");",
                  "    pm.environment.set(\"user_uuid\", jsonData.user.uuid);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"john.smith.{{$timestamp}}@example.com\",\n    \"phone\": \"+447123456789\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\",\n    \"bio\": \"Experienced plumber with 15 years in the industry\",\n    \"skills\": [\"Plumbing\", \"Heating\", \"Gas Safety\"],\n    \"experience_years\": 15,\n    \"city\": \"London\",\n    \"postcode\": \"SW1A 1AA\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["register", "tradesperson"]
            }
          },
          "response": []
        },
        {
          "name": "Register Company (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Company user created\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user.user_type).to.eql(\"company\");",
                  "    ",
                  "    // Save company UUID and token if provided",
                  "    if (jsonData.user.uuid) {",
                  "        pm.environment.set(\"company_uuid\", jsonData.user.uuid);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\",\n    \"email\": \"jane.doe.{{$timestamp}}@company.com\",\n    \"phone\": \"+4479876{{$timestamp}}\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\",\n    \"company_name\": \"ABC Construction Ltd\",\n    \"company_type\": \"limited\",\n    \"company_registration\": \"12345678\",\n    \"registered_address\": \"123 Business Street\",\n    \"city\": \"London\",\n    \"postcode\": \"EC1A 1BB\",\n    \"company_email\": \"info@abc-construction.com\",\n    \"company_phone\": \"+442071234567\",\n    \"company_website\": \"https://abc-construction.com\",\n    \"description\": \"Leading construction company specializing in commercial projects\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/company",
              "host": ["{{base_url}}"],
              "path": ["register", "company"]
            }
          },
          "response": []
        },
        {
          "name": "Register - Duplicate Email (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation error for duplicate email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.have.property(\"email\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"+447111111111\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["register", "tradesperson"]
            }
          },
          "response": []
        },
        {
          "name": "Register - Missing Fields (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation errors returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"errors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"John\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["register", "tradesperson"]
            }
          },
          "response": []
        },
        {
          "name": "Register - Invalid Email (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Email validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors.email).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"invalid-email\",\n    \"phone\": \"+447123456789\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["register", "tradesperson"]
            }
          },
          "response": []
        },
        {
          "name": "Register - Password Mismatch (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Password confirmation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors.password).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+447123456789\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"DifferentPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["register", "tradesperson"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Phone Verification (OTP)",
      "item": [
        {
          "name": "Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"OTP sent successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"OTP sent\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"+447123456789\",\n    \"purpose\": \"phone_verification\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/otp/send",
              "host": ["{{base_url}}"],
              "path": ["otp", "send"]
            }
          },
          "response": []
        },
        {
          "name": "Verify OTP (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Phone verified\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"+447123456789\",\n    \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/otp/verify",
              "host": ["{{base_url}}"],
              "path": ["otp", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Verify OTP - Invalid Code (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Invalid OTP error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"+447123456789\",\n    \"otp\": \"000000\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/otp/verify",
              "host": ["{{base_url}}"],
              "path": ["otp", "verify"]
            }
          },
          "response": []
        },
        {
          "name": "Verify OTP - Expired Code (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"OTP expired message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"expired\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"+447123456789\",\n    \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/otp/verify",
              "host": ["{{base_url}}"],
              "path": ["otp", "verify"]
            },
            "description": "Use this after waiting 10+ minutes from OTP generation"
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Authentication - Login",
      "item": [
        {
          "name": "Login Tradesperson (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Login successful and token received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData).to.have.property(\"token\");",
                  "    ",
                  "    // Save token to environment",
                  "    pm.environment.set(\"token\", jsonData.token);",
                  "    pm.environment.set(\"user_uuid\", jsonData.user.uuid);",
                  "});",
                  "",
                  "pm.test(\"User data returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.user.user_type).to.eql(\"tradesperson\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login Company (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Company login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"company_token\", jsonData.token);",
                  "    pm.expect(jsonData.user.user_type).to.eql(\"company\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"jane.doe@company.com\",\n    \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login - Wrong Password (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Invalid credentials error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"credentials\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login - Non-existent User (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Credentials error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"credentials\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login - Missing Credentials (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation error for missing password\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors.password).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "5. Authenticated User",
      "item": [
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"user\");",
                  "    pm.expect(jsonData.user).to.have.property(\"email\");",
                  "    pm.expect(jsonData.user).to.have.property(\"uuid\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User - No Auth (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Unauthenticated message returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include(\"Unauthenticated\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            },
            "description": "Test accessing protected route without authentication"
          },
          "response": []
        },
        {
          "name": "Get Current User - Invalid Token (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Unauthenticated error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_12345"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            },
            "description": "Test with invalid/expired token"
          },
          "response": []
        }
      ]
    },
    {
      "name": "6. Profile Management",
      "item": [
        {
          "name": "Update Tradesperson Profile (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.user.experience_years).to.eql(20);",
                  "    pm.expect(jsonData.user.skills).to.include(\"Gas Safety\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"bio\": \"Experienced plumber with 20 years in the trade. Specializing in residential and commercial installations.\",\n    \"skills\": [\"Plumbing\", \"Heating\", \"Gas Safety\", \"Bathroom Fitting\"],\n    \"experience_years\": 20,\n    \"city\": \"Manchester\",\n    \"postcode\": \"M1 1AA\",\n    \"hourly_rate\": 45.00,\n    \"availability\": \"full-time\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/profile/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["profile", "tradesperson"]
            }
          },
          "response": []
        },
        {
          "name": "Update Company Profile (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Company profile updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{company_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"company_name\": \"ABC Construction Ltd\",\n    \"company_registration\": \"12345678\",\n    \"company_address\": \"456 New Business Park, London\",\n    \"company_postcode\": \"EC2A 2BB\",\n    \"company_website\": \"https://abc-construction.co.uk\",\n    \"company_description\": \"Leading construction company with 30 years of experience\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/profile/company",
              "host": ["{{base_url}}"],
              "path": ["profile", "company"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile - Invalid Data (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation errors returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"errors\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"experience_years\": -5,\n    \"hourly_rate\": \"invalid\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/profile/tradesperson",
              "host": ["{{base_url}}"],
              "path": ["profile", "tradesperson"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "7. Password Management",
      "item": [
        {
          "name": "Request Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Reset link sent\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"reset link sent\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"john.smith@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/password/forgot",
              "host": ["{{base_url}}"],
              "path": ["forgot-password"]
            },
            "description": "Check http://localhost:8025 (Mailhog) for the reset email"
          },
          "response": []
        },
        {
          "name": "Reset Password with Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password reset successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"PASTE_TOKEN_FROM_EMAIL_HERE\",\n    \"email\": \"john.smith@example.com\",\n    \"password\": \"NewPassword123!\",\n    \"password_confirmation\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/password-reset",
              "host": ["{{base_url}}"],
              "path": ["reset-password"]
            },
            "description": "Get the token from the email in Mailhog"
          },
          "response": []
        },
        {
          "name": "Change Password (Authenticated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Password changed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"current_password\": \"Password123!\",\n    \"password\": \"NewPassword456!\",\n    \"password_confirmation\": \"NewPassword456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/password",
              "host": ["{{base_url}}"],
              "path": ["password"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password - Wrong Current Password (Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Current password error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors.current_password).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"current_password\": \"WrongPassword!\",\n    \"password\": \"NewPassword456!\",\n    \"password_confirmation\": \"NewPassword456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/password",
              "host": ["{{base_url}}"],
              "path": ["password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "8. Search & Discovery (Public)",
      "item": [
        {
          "name": "Search Tradespeople",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data).to.be.an(\"array\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/search/tradespeople?skill=Plumbing&city=London&page=1",
              "host": ["{{base_url}}"],
              "path": ["search", "tradespeople"],
              "query": [
                {
                  "key": "skill",
                  "value": "Plumbing"
                },
                {
                  "key": "city",
                  "value": "London"
                },
                {
                  "key": "page",
                  "value": "1"
                }
              ]
            },
            "description": "Public endpoint - no authentication needed"
          },
          "response": []
        },
        {
          "name": "Get Tradesperson Public Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tradesperson profile returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.tradesperson).to.have.property(\"uuid\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/tradespeople/{{user_uuid}}",
              "host": ["{{base_url}}"],
              "path": ["tradespeople", "{{user_uuid}}"]
            },
            "description": "Get public profile of a tradesperson by UUID"
          },
          "response": []
        }
      ]
    },
    {
      "name": "9. Logout & Token Management",
      "item": [
        {
          "name": "Logout (Revoke Current Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    ",
                  "    // Clear tokens from environment",
                  "    pm.environment.set(\"token\", \"\");",
                  "    pm.environment.set(\"user_uuid\", \"\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/logout",
              "host": ["{{base_url}}"],
              "path": ["logout"]
            }
          },
          "response": []
        },
        {
          "name": "Logout All Devices (Revoke All Tokens)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logged out from all devices\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message).to.include(\"all devices\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/logout-all",
              "host": ["{{base_url}}"],
              "path": ["logout-all"]
            },
            "description": "Revokes all tokens for this user across all devices"
          },
          "response": []
        }
      ]
    },
    {
      "name": "10. Error Scenarios",
      "item": [
        {
          "name": "Rate Limit Exceeded (429)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Rate limit response\", function () {",
                  "    // Will be 200 if not rate limited, 429 if rate limited",
                  "    var statusCode = pm.response.code;",
                  "    pm.expect([200, 429]).to.include(statusCode);",
                  "    ",
                  "    if (statusCode === 429) {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property(\"retry_after\");",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            },
            "description": "Make 60+ requests within 1 minute to trigger rate limit"
          },
          "response": []
        },
        {
          "name": "Method Not Allowed (405)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 405\", function () {",
                  "    pm.response.to.have.status(405);",
                  "});",
                  "",
                  "pm.test(\"Method not allowed message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"not supported\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Try using wrong HTTP method on endpoint"
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api",
      "type": "string"
    }
  ]
}
